{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
		 Only "getter" methods (method names starting with "get", "has", or "is")
		 and a few common methods such as "id" and "label" are available. Calling
		 other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}	
{% import "@cornell/includes/filesize.html.twig" as filesize %}

{%
	set classes = [
		node.bundle|clean_class,
		node.isPromoted() ? 'is-promoted',
		node.isSticky() ? 'is-sticky',
		not node.isPublished() ? 'is-unpublished',
		view_mode ? view_mode|clean_class,
        'person',
	]
%}
<header class="basic-hero keep-left">
    {% if content.field_person_image %}
        <span class="basic-hero__image" style="background-image: url({{ file_url(content.field_person_image['#items'].0.entity.fileuri) }})">
            <span class="visually-hidden">{{ content.field_person_image['#items'].0.alt }}</span>
        </span>
    {% endif %}
	<h1 class="basic-hero__heading">
        {% if content.field_person_prefix or content.field_person_first_name or content.field_person_last_name or content.field_person_suffix %}
            {{ content.field_person_prefix['#items'].0.value }} {{ content.field_person_first_name['#items'].0.value }} {{ content.field_person_last_name['#items'].0.value }} {{ content.field_person_suffix['#items'].0.value }}
        {% else %}
            {{ label }}
        {% endif %}
    </h1>

    {% if content.field_person_designation %}
        <p class="basic-hero__subheading narrow">
            {{ content.field_person_designation['#items'].0.value }}
        </p>
    {% endif %}
</header>
{# <pre>
{{ dump(content|keys) }}
</pre> #}
<article{{ attributes.addClass(classes) }}>
    <h2 class="visually-hidden">About {{ label }}</h2>
	<section class="person__content">
        {% if content.body|render %}
            <h3 class="person-sidebar__heading">Overview</h3>
            <div class="person__body rte">
                {{ content.body }}
            </div>
        {% endif %}
        <hr class="hr--squiggly">
    </section>

    <aside class="person-sidebar">
        <h3 class="person-sidebar__heading">Contact</h3>

        <div class="person-sidebar__item">
            {% if content.field_address|render %}
                <span class="person-sidebar__field">{{ content.field_address['#items'].0.value }}</span>
            {% endif %}

            {% if content.field_phone|render %}
                <span class="person-sidebar__field">{{ content.field_phone['#items'].0.value }}</span>
            {% endif %}

            {% if content.field_person_email|render %}
                <a class="person-sidebar__link" href="mailto:{{ content.field_person_email['#items'].0.value }}">{{ content.field_person_email['#items'].0.value }}</a>
            {% endif %}
        </div>

        {% if content.field_resources|render %}
            <h3 class="person-sidebar__heading">Related Resources</h3>

            <div class="person-sidebar__item rte">
                {{ content.field_resources['#items'].0.value|raw }}
            </div>
        {% endif %}

        {% if content.field_cv|render %}
            <h3 class="person-sidebar__heading">CV</h3>

            <div class="person-sidebar__item">
                {% set cv = content.field_cv['#items'].entity %}
                <a class="person-sidebar__link" href="{{ file_url(cv.uri.value) }}">Download CV ({{ cv.filemime.value|split("/")|last }}, {{ filesize.bytesToSize(cv.filesize.value) }})</a>
            </div>
        {% endif %}
        
    </aside>
</article>

<section class="person-insights">
    <h2 class="person-insights__heading person-sidebar__heading">Insights</h2>
    {{ drupal_view('insights_widget') }}
</section>
