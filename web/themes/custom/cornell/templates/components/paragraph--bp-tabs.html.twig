{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% block paragraph %}
{# {{ title_suffix }} #}
{# Prints Tabs template. #}
<div role="tablist" aria-multiselectable="true">
  <div class="tab-container">
    <div class="tab-inner">

      {# Nav for tabs #}
      <div class="tabs" role="tablist">
        {# Loops through the tab sections to print the tab section titles. #}
        {% for key, item in content.bp_tab_section if key|first != '#' %}
          <button class="tab{% if loop.first %} active{% endif %}" data-for="tab{{key + 1}}" aria-controls="tab{{key + 1}}" aria-role="tab" aria-selected="{% if loop.first %}true{% else %}false{% endif %}">
            {{ item['#paragraph'].bp_tab_section_title.value }}
          </button>
        {% endfor %}
      </div>

      {# Tab Content Panels #}
      <div class="content-container">
        {# Loops through the tab sections again to print the tab section bodies. #}
        {% for key, item in content.bp_tab_section if key|first != '#' %}
          <div id="tab{{ key + 1 }}" class="tab-content{% if loop.first %} active{% endif %}" aria-hidden="{% if loop.first %}true{% else %}false{% endif %}" aria-role="tabpanel">
            {% for body_key, body_item in item['#paragraph'].bp_tab_section_body %}
              {# Use the same render array as item and set the '#paragraph'. #}
              {% set section_body = item %}
              {# Load the entity for the current translation #}
              {% set section_body = section_body|merge({'#paragraph': section_body['#paragraph'].bp_tab_section_body[body_key].entity.getTranslation(section_body['#paragraph'].langcode[0].value)}) %}
              {# Remove the cache keys so it doesn't repeat the first value. #}
              {% set section_body = section_body|merge({'#cache': {}}) %}
              {# Print the compiled section body. #}
              <div class="main-content">
              {{ section_body }}
              </div>
            {% endfor %}
          </div>
        {% endfor %}
      </div>

    </div>
  </div>
</div>
{% endblock paragraph %}

